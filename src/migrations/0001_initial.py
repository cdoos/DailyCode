# Generated by Django 4.1 on 2022-09-16 07:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=30, unique=True, verbose_name='email address')),
                ('leetcode_username', models.CharField(max_length=30, unique=True, verbose_name='Leetcode username')),
                ('password', models.CharField(max_length=30, verbose_name='password')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Admin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last Name')),
                ('easy', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Easy')),
                ('medium', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Medium')),
                ('hard', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hard')),
                ('streak', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Streak')),
                ('last_solved_date', models.DateTimeField(null=True, verbose_name='Last solved date')),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='Photo')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Rating')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_id', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='Problem ID')),
                ('title', models.CharField(max_length=300, verbose_name='Title')),
                ('titleSlug', models.CharField(max_length=300, verbose_name='Title Slug')),
                ('type', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=6, verbose_name='Type')),
                ('solved', models.BooleanField(default=False, verbose_name='Solved')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='src.profile', verbose_name='Profile')),
            ],
        ),
    ]
